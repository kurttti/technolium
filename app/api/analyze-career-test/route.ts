import { NextResponse } from 'next/server'
import OpenAI from 'openai'

export const runtime = 'edge'

const courses = [
  {
    name: "Машинное обучение",
    description: "Комплексный курс по анализу данных и построению предиктивных моделей с использованием Python. Включает основы статистики, работу с большими данными и практику построения ML-моделей.",
    skills: ["Python", "статистика", "SQL", "машинное обучение", "визуализация данных", "математический анализ"],
    courseUrl: "/machine-learning"
  },
  {
    name: "Автоматизация тестирования ПО",
    description: "Практический курс по автоматизации тестирования с фокусом на веб-приложения. Охватывает создание тестовых фреймворков, интеграцию с CI/CD и best practices в автоматизации.",
    skills: ["Selenium", "Python", "API тестирование", "CI/CD", "Git", "написание тест-кейсов"],
    courseUrl: "/software-testing"
  },
  {
    name: "Информационная безопасность",
    description: "Углубленное изучение основ кибербезопасности, включая защиту сетей, криптографию и этичный хакинг. Курс сочетает теорию с практическими лабораторными работами.",
    skills: ["сетевая безопасность", "криптография", "анализ уязвимостей", "Linux", "системное администрирование", "этичный хакинг"],
    courseUrl: "/information-security"
  },
  {
    name: "Серверная веб-разработка",
    description: "Интенсивный курс по backend-разработке с акцентом на современные технологии и архитектурные подходы. Включает работу с базами данных, API и микросервисами.",
    skills: ["Node.js", "Python/Django", "SQL", "REST API", "MongoDB", "микросервисы"],
    courseUrl: "/web-development"
  }
]

const systemPrompt = `Ты - опытный карьерный консультант по IT-профессиям. Твоя задача - помочь человеку выбрать оптимальное направление в IT и мотивировать его начать обучение. Проанализируй ответы пользователя и составь персонализированную рекомендацию, которая:

1. Начинается с эмпатичного обращения, показывающего, что ты понимаешь текущую ситуацию и стремления пользователя
2. Подчеркивает конкретные преимущества и возможности рекомендуемых направлений с учетом целей пользователя (доход, формат работы, интересы)
3. Приводит реальные примеры успеха и перспектив в выбранном направлении
4. Объясняет, почему именно сейчас лучшее время для старта
5. Дает конкретный план первых шагов

Формат ответа:

<h3>Персональный анализ вашей ситуации</h3>
<p>[Эмпатичное обращение, отражающее понимание целей и боли пользователя]</p>

<h3>Ваш потенциал в IT</h3>
<p>[Описание сильных сторон и предрасположенности к определенным направлениям]</p>

<p><strong>Рекомендуемые направления:</strong></p>
<ul>
<li><a href="https://technolium.ru/specialties[courseUrl из объекта курса]">[Первое направление из списка]</a> - [Краткое описание почему подходит]</li>
<li><a href="https://technolium.ru/specialties[courseUrl из объекта курса]">[Второе направление из списка, если подходит]</a> - [Краткое описание почему подходит]</li>
</ul>

<h3>Почему эти направления идеально подходят именно вам:</h3>
<ul>
<li>[Связь с целями по доходу]</li>
<li>[Связь с желаемым форматом работы]</li>
<li>[Связь с интересами и проектами]</li>
<li>[Связь с текущим опытом]</li>
</ul>

<h3>Ваши следующие шаги:</h3>
<ol>
<li>Запишитесь на бесплатную консультацию с нашим карьерным консультантом</li>
<li>Получите подробный учебный план</li>
<li>Узнайте о специальных условиях при быстром старте</li>
</ol>

<p><strong>Важно:</strong> Судя по вашим ответам, вы [указать срочность] готовы к старту. Рекомендуем не откладывать начало обучения, так как [персонализированная причина важности быстрого старта].</p>

Используй эмоциональный, но профессиональный тон. Подчеркивай конкретные выгоды и возможности. Мотивируй к действию, но избегай явного давления.`

export async function POST(request: Request) {
  try {
    const { answers } = await request.json()

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    const formattedAnswers = answers
      .map((a: any) => `Вопрос ${a.questionId + 1}: ${a.answer}`)
      .join('\n')

    const formattedCourses = courses
      .map(c => `${c.name}: ${c.description}\nНавыки: ${c.skills.join(', ')}`)
      .join('\n\n')

    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: `Ответы теста:\n${formattedAnswers}\n\nДоступные курсы:\n${formattedCourses}` }
      ],
      temperature: 0.7,
      max_tokens: 500,
    })

    return NextResponse.json({ 
      result: response.choices[0].message.content 
    })
  } catch (error) {
    console.error('Error analyzing test results:', error)
    return NextResponse.json(
      { error: 'Failed to analyze test results' },
      { status: 500 }
    )
  }
}
